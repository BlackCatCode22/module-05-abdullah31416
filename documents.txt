Components:
Main Class: ('Main.java'):

in charge of organizing the entire procedure.
manages the creation of reports, data processing, and file reading.
Animal Class ('Animal.java'):

depicts the fundamental makeup of an animal.
includes properties for name, age, and species that are encapsulated.
offers getters, setters, and constructors to access and modify properties.
Subclasses (Hyena.java, Lion.java, Tiger.java, and Bear.java):

animals that are represented by subclasses of the "Animal' class.
includes extra characteristics and techniques unique to each kind of animal.

Data Structures:
ArrayList ('ArrayList<Animal>'):

used to keep samples of various animal species.
allows for simple iteration over animal instances and dynamic resizing.
HashMap ('Hashmap<String, Integer>'):

used to keep track of each species' occurrences.
Pairs of keys and values: Name of species (String) -> Number of occurrences (Integer).
Interactions:
Examining Animal Data:

'AnimalNames.txt' and 'arrivingAnimals.txt' are the two input files that the main class reads data from.
Line by line, the data is processed with BufferedReader.
Making Animal Models:

The information retrieved from the files is used to create animal instances.
Depending on the species, various animal types can be dynamically instantiated using the factory method ('createAnimal()').
Species Counting:

Each species' occurrences are counted using HashMap ('speciesCount').
The HashMap is updated with the current number of each species when new animal instances are created.
Producing a Report:

The count of each species is recorded together with the animal details in an output file called ('newAnimals.txt").
The report is written to the file using BufferedWriter.
Error Resolution:

To ensure robustness, IOExceptions are caught and handled gracefully.
Class Relationships:

'Hyena', 'Lion', 'Tiger', and 'Bear' are superclasses within the 'Animal' class.
The subclasses add particular features and take over the 'Animal' class's methods and properties.
The 'Main' class manages how the components that read, process, and generate reports interact with each other to create the process.
Design Points to Remember:


Data modularity and integrity are guaranteed by maintaining encapsulation.
The various traits of various animal species are supported by inheritance and polymorphism.
Effective data manipulation and storage are made possible by the usage of hash maps and array lists.
Error handling techniques are used to gracefully handle possible file I/O errors.
